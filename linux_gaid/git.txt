#
# !!!       Команды Git       !!!
#

# Для более глубокого изучения конкретных команд
git help <команда>
git <команда> --help

# Создание и клонирование репозиториев
git init                                                        # Инициализация нового репозитория в текущей папке
git clone <URL-репозитория>                                     # Клонирование существующего репозитория по URL
git clone <URL-репозитория> <имя-папки>                         # Клонирование в конкретную папку

# Работа с удалёнными репозиториями                             
git pull <имя-удалённого-репозитория> <имя-ветки>               # Загрузка изменений и автоматическое слияние с текущей веткой
git push <имя-удалённого-репозитория> <имя-ветки>               # Отправка изменений в удалённый репозиторий
git push -u origin <имя-ветки>                                  # Отправка изменений и установление связи между ветками
git push <имя-удалённого-репозитория> --delete <имя-ветки>      # Удаление ветки на удалённом репозитории
git remote show <имя-удалённого-репозитория>                    # Получение информации об удалённом репозитории
git remote -v                                                   # Просмотр списка удалённых репозиториев
git remote add <имя> <URL>                                      # Добавление удалённого репозитория
git remote remove <имя>                                         # Удаление удалённого репозитория
git remote rename <старое-имя> <новое-имя>                      # Переименование удалённого репозитория
git fetch <имя-удалённого-репозитория>                          # Загрузка изменений из удалённого репозитория (без слияния) 

# Основные рабочие команды
git add <имя-файла>                                             # Добавление конкретного файла в индекс
git add .                                                       # Добавление всех изменённых файлов в индекс
git add *.txt                                                   # Добавление всех файлов с определённым расширением
git status                                                      # Проверка статуса репозитория (отслеживаемые и неотслеживаемые файлы)
git commit                                                      # Создание коммита с открытием редактора для сообщения
git commit -m "Сообщение коммита"                               # Создание коммита с сообщением
git commit -am "Сообщение коммита"                              # Создание коммита с сообщением и добавление всех изменённых файлов в индекс
git commit --amend --no-edit                                    # Добавление изменений в последний коммит (без изменения сообщения)
git commit --amend -m "Новое сообщение коммита"                 # Добавление изменений в последний коммит с изменением сообщения

# Ветвление и слияние
git branch                                                      # Просмотр списка веток (текущая выделена звёздочкой)
git branch <имя-ветки>                                          # Создание новой ветки
git branch -d <имя-ветки>                                       # Удаление ветки (после слияния)
git branch -D <имя-ветки>                                       # Принудительное удаление ветки (даже если не была объединена)
git branch -m <старое-имя> <новое-имя>                          # Переименование ветки
git checkout <имя-ветки>                                        # Переключение на другую ветку
git checkout -b <имя-ветки>                                     # Создание новой ветки и переключение на неё
git merge <имя-ветки>                                           # Слияние указанной ветки с текущей

# Просмотр истории и изменений
git log                                                         # Просмотр истории коммитов
git log --oneline                                               # Компактный просмотр истории (одна строка на коммит)
git log --graph                                                 # Просмотр истории с графиком ветвления
git log -p                                                      # Просмотр истории с изменениями в файлах
git show <хэш-коммита>                                          # Просмотр информации о конкретном коммите
git diff                                                        # Просмотр изменений в рабочем каталоге (не добавленных в индекс)
git diff --staged                                               # Просмотр изменений в проиндексированных файлах
git diff <имя-файла>                                            # Просмотр изменений в конкретном файле
git diff <хэш1> <хэш2>                                          # Просмотр изменений между двумя коммитами
git difftool                                                    # Просмотр изменений с помощью внешней утилиты сравнения